- There are only three outcomes as far as Pytest is concerned: 'passed', 'failed', 'skipped'
- Most tests are made up of three phases ("when"): 'setup', 'call', 'teardown'
- The actual test outcome is shown during the 'call' phase:
  - for 'passed' tests, all three phases show outcome = 'passed'
  - for 'failed' tests, only the 'call' phase shows outcome = 'failed'; 'setup' and 'teardown' show 'passed'
  - for 'failed' tests, the traceback info is located in the "longreprtext" field (but stripped of ANSI codes)
- Some tests only have two phases:
  - for 'skipped' tests, only 'setup' and 'teardown' exist IF they were marked as skip with the `pytest.mark.skip` decorator
  - for 'skipped' tests, all three phases exist IF they were forced to skip with the `pytest.skip` statement inside the test
  - for 'skipped' tests, 'setup' phase has outcome = 'skipped'

 - For skipped tests, check this logic:
 if hasattr(report, "wasxfail"):
    if report.skipped:
        return "xfailed", "x", "XFAIL"
      elif report.passed:
        return "xpassed", "X", "XPASS"


- Tests with a warning are 'passed' tests (outcome='passed' for all three phases)
- stdout, stderr and stdlog info is contained in the 'call' phase only
- If a test results in 'error', no stdout/stderr/stdlog will be shown, just the error msg
- When a test passes despite being expected to fail (marked with pytest.mark.xfail), itâ€™s an xpass and will be reported in the test summary
- It *appears* as if Pytest marks an Xpass test with outcome=passed, and keyword: xfail. This is the only example of a test with keyword: xfail that i have seen.

- All the above notwithstanding, pytest still marks tests with a final category of one of the following, and then sends to console:
KNOWN_TYPES = (
    "failed",
    "passed",
    "skipped",
    "deselected",
    "xfailed",
    "xpassed",
    "warnings",
    "error",
)

- Console prints the following sections, delineated with separator line consisting of multiple "=" characters, with information embedded in middle of "=" characters (see terminal.py):
session_start: self.write_sep("=", "test session starts", bold=True)
summary_warnings: self.write_sep("=", "warnings summary", yellow=True, bold=False)
summary_errors: self.write_sep("=", "ERRORS")
summary_failures: self.write_sep("=", "FAILURES")
summary_passes: self.write_sep("=", "PASSES")
summary_stats: self.write_sep("=", msg, fullwidth=fullwidth, **main_markup)
self.write_sep("=", "short test summary info")

WILL POSSIBLY NEED:
FIRSTLINE
LAST_LINE
WARNINGS_SUMMARY
SHORT_TEST_SUMMARY_INFO
TEST_TEST_SESSION_STARTSS
